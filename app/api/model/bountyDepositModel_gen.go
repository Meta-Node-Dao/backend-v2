// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bountyDepositFieldNames          = builder.RawFieldNames(&BountyDeposit{})
	bountyDepositRows                = strings.Join(bountyDepositFieldNames, ",")
	bountyDepositRowsExpectAutoSet   = strings.Join(stringx.Remove(bountyDepositFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bountyDepositRowsWithPlaceHolder = strings.Join(stringx.Remove(bountyDepositFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bountyDepositModel interface {
		Insert(ctx context.Context, data *BountyDeposit) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BountyDeposit, error)
		FindOneByChainIdTxHash(ctx context.Context, chainId sql.NullInt64, txHash sql.NullString) (*BountyDeposit, error)
		Update(ctx context.Context, data *BountyDeposit) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBountyDepositModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BountyDeposit struct {
		Id          int64          `db:"id"`
		ChainId     sql.NullInt64  `db:"chain_id"`
		TxHash      sql.NullString `db:"tx_hash"`
		Status      sql.NullInt64  `db:"status"`
		BountyId    sql.NullInt64  `db:"bounty_id"`
		ComerId     sql.NullInt64  `db:"comer_id"`
		Access      sql.NullInt64  `db:"access"`
		TokenSymbol sql.NullString `db:"token_symbol"`
		TokenAmount sql.NullInt64  `db:"token_amount"`
		Timestamp   sql.NullTime   `db:"timestamp"`
		CreatedAt   sql.NullTime   `db:"created_at"`
		UpdatedAt   sql.NullTime   `db:"updated_at"`
		IsDeleted   sql.NullInt64  `db:"is_deleted"`
	}
)

func newBountyDepositModel(conn sqlx.SqlConn) *defaultBountyDepositModel {
	return &defaultBountyDepositModel{
		conn:  conn,
		table: "`bounty_deposit`",
	}
}

func (m *defaultBountyDepositModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBountyDepositModel) FindOne(ctx context.Context, id int64) (*BountyDeposit, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bountyDepositRows, m.table)
	var resp BountyDeposit
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBountyDepositModel) FindOneByChainIdTxHash(ctx context.Context, chainId sql.NullInt64, txHash sql.NullString) (*BountyDeposit, error) {
	var resp BountyDeposit
	query := fmt.Sprintf("select %s from %s where `chain_id` = ? and `tx_hash` = ? limit 1", bountyDepositRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, chainId, txHash)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBountyDepositModel) Insert(ctx context.Context, data *BountyDeposit) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bountyDepositRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ChainId, data.TxHash, data.Status, data.BountyId, data.ComerId, data.Access, data.TokenSymbol, data.TokenAmount, data.Timestamp, data.IsDeleted)
	return ret, err
}

func (m *defaultBountyDepositModel) Update(ctx context.Context, newData *BountyDeposit) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bountyDepositRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ChainId, newData.TxHash, newData.Status, newData.BountyId, newData.ComerId, newData.Access, newData.TokenSymbol, newData.TokenAmount, newData.Timestamp, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultBountyDepositModel) tableName() string {
	return m.table
}
