// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	crowdfundingInvestorFieldNames          = builder.RawFieldNames(&CrowdfundingInvestor{})
	crowdfundingInvestorRows                = strings.Join(crowdfundingInvestorFieldNames, ",")
	crowdfundingInvestorRowsExpectAutoSet   = strings.Join(stringx.Remove(crowdfundingInvestorFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	crowdfundingInvestorRowsWithPlaceHolder = strings.Join(stringx.Remove(crowdfundingInvestorFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	crowdfundingInvestorModel interface {
		Insert(ctx context.Context, data *CrowdfundingInvestor) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CrowdfundingInvestor, error)
		FindOneByCrowdfundingIdComerId(ctx context.Context, crowdfundingId int64, comerId int64) (*CrowdfundingInvestor, error)
		Update(ctx context.Context, data *CrowdfundingInvestor) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCrowdfundingInvestorModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CrowdfundingInvestor struct {
		Id               int64     `db:"id"`
		CrowdfundingId   int64     `db:"crowdfunding_id"`    // Crowdfunding id
		ComerId          int64     `db:"comer_id"`           // Investor' comer id
		BuyTokenTotal    float64   `db:"buy_token_total"`    // Buy token total
		BuyTokenBalance  float64   `db:"buy_token_balance"`  // Buy token balance
		SellTokenTotal   float64   `db:"sell_token_total"`   // Selling token total
		SellTokenBalance float64   `db:"sell_token_balance"` // Selling token balance
		CreatedAt        time.Time `db:"created_at"`
		UpdatedAt        time.Time `db:"updated_at"`
	}
)

func newCrowdfundingInvestorModel(conn sqlx.SqlConn) *defaultCrowdfundingInvestorModel {
	return &defaultCrowdfundingInvestorModel{
		conn:  conn,
		table: "`crowdfunding_investor`",
	}
}

func (m *defaultCrowdfundingInvestorModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCrowdfundingInvestorModel) FindOne(ctx context.Context, id int64) (*CrowdfundingInvestor, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", crowdfundingInvestorRows, m.table)
	var resp CrowdfundingInvestor
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCrowdfundingInvestorModel) FindOneByCrowdfundingIdComerId(ctx context.Context, crowdfundingId int64, comerId int64) (*CrowdfundingInvestor, error) {
	var resp CrowdfundingInvestor
	query := fmt.Sprintf("select %s from %s where `crowdfunding_id` = ? and `comer_id` = ? limit 1", crowdfundingInvestorRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, crowdfundingId, comerId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCrowdfundingInvestorModel) Insert(ctx context.Context, data *CrowdfundingInvestor) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, crowdfundingInvestorRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.CrowdfundingId, data.ComerId, data.BuyTokenTotal, data.BuyTokenBalance, data.SellTokenTotal, data.SellTokenBalance)
	return ret, err
}

func (m *defaultCrowdfundingInvestorModel) Update(ctx context.Context, newData *CrowdfundingInvestor) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, crowdfundingInvestorRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.CrowdfundingId, newData.ComerId, newData.BuyTokenTotal, newData.BuyTokenBalance, newData.SellTokenTotal, newData.SellTokenBalance, newData.Id)
	return err
}

func (m *defaultCrowdfundingInvestorModel) tableName() string {
	return m.table
}
