// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bountyFieldNames          = builder.RawFieldNames(&Bounty{})
	bountyRows                = strings.Join(bountyFieldNames, ",")
	bountyRowsExpectAutoSet   = strings.Join(stringx.Remove(bountyFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bountyRowsWithPlaceHolder = strings.Join(stringx.Remove(bountyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bountyModel interface {
		Insert(ctx context.Context, data *Bounty) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Bounty, error)
		FindOneByChainIdTxHash(ctx context.Context, chainId int64, txHash string) (*Bounty, error)
		Update(ctx context.Context, data *Bounty) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBountyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Bounty struct {
		Id                 int64     `db:"id"`
		ChainId            int64     `db:"chain_id"`         // Chain ID
		TxHash             string    `db:"tx_hash"`          // Transcation Hash
		DepositContract    string    `db:"deposit_contract"` // Contract Address
		StartupId          int64     `db:"startup_id"`
		ComerId            int64     `db:"comer_id"`
		Title              string    `db:"title"`
		ApplyCutoffDate    time.Time `db:"apply_cutoff_date"`
		DiscussionLink     string    `db:"discussion_link"`
		DepositTokenSymbol string    `db:"deposit_token_symbol"`
		ApplicantDeposit   int64     `db:"applicant_deposit"`
		FounderDeposit     int64     `db:"founder_deposit"`
		Description        string    `db:"description"`
		PaymentMode        int64     `db:"payment_mode"`
		Status             int64     `db:"status"`
		TotalRewardToken   int64     `db:"total_reward_token"`
		CreatedAt          time.Time `db:"created_at"`
		UpdatedAt          time.Time `db:"updated_at"`
		IsDeleted          int64     `db:"is_deleted"`
	}
)

func newBountyModel(conn sqlx.SqlConn) *defaultBountyModel {
	return &defaultBountyModel{
		conn:  conn,
		table: "`bounty`",
	}
}

func (m *defaultBountyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBountyModel) FindOne(ctx context.Context, id int64) (*Bounty, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bountyRows, m.table)
	var resp Bounty
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBountyModel) FindOneByChainIdTxHash(ctx context.Context, chainId int64, txHash string) (*Bounty, error) {
	var resp Bounty
	query := fmt.Sprintf("select %s from %s where `chain_id` = ? and `tx_hash` = ? limit 1", bountyRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, chainId, txHash)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBountyModel) Insert(ctx context.Context, data *Bounty) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bountyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ChainId, data.TxHash, data.DepositContract, data.StartupId, data.ComerId, data.Title, data.ApplyCutoffDate, data.DiscussionLink, data.DepositTokenSymbol, data.ApplicantDeposit, data.FounderDeposit, data.Description, data.PaymentMode, data.Status, data.TotalRewardToken, data.IsDeleted)
	return ret, err
}

func (m *defaultBountyModel) Update(ctx context.Context, newData *Bounty) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bountyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ChainId, newData.TxHash, newData.DepositContract, newData.StartupId, newData.ComerId, newData.Title, newData.ApplyCutoffDate, newData.DiscussionLink, newData.DepositTokenSymbol, newData.ApplicantDeposit, newData.FounderDeposit, newData.Description, newData.PaymentMode, newData.Status, newData.TotalRewardToken, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultBountyModel) tableName() string {
	return m.table
}
