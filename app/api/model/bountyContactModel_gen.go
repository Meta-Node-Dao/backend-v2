// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bountyContactFieldNames          = builder.RawFieldNames(&BountyContact{})
	bountyContactRows                = strings.Join(bountyContactFieldNames, ",")
	bountyContactRowsExpectAutoSet   = strings.Join(stringx.Remove(bountyContactFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bountyContactRowsWithPlaceHolder = strings.Join(stringx.Remove(bountyContactFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bountyContactModel interface {
		Insert(ctx context.Context, data *BountyContact) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BountyContact, error)
		FindOneByBountyIdContactTypeContactAddress(ctx context.Context, bountyId sql.NullInt64, contactType sql.NullInt64, contactAddress sql.NullString) (*BountyContact, error)
		Update(ctx context.Context, data *BountyContact) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBountyContactModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BountyContact struct {
		Id             int64          `db:"id"`
		BountyId       sql.NullInt64  `db:"bounty_id"`
		ContactType    sql.NullInt64  `db:"contact_type"`
		ContactAddress sql.NullString `db:"contact_address"`
		CreatedAt      sql.NullTime   `db:"created_at"`
		UpdatedAt      sql.NullTime   `db:"updated_at"`
		IsDeleted      sql.NullInt64  `db:"is_deleted"`
	}
)

func newBountyContactModel(conn sqlx.SqlConn) *defaultBountyContactModel {
	return &defaultBountyContactModel{
		conn:  conn,
		table: "`bounty_contact`",
	}
}

func (m *defaultBountyContactModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBountyContactModel) FindOne(ctx context.Context, id int64) (*BountyContact, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bountyContactRows, m.table)
	var resp BountyContact
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBountyContactModel) FindOneByBountyIdContactTypeContactAddress(ctx context.Context, bountyId sql.NullInt64, contactType sql.NullInt64, contactAddress sql.NullString) (*BountyContact, error) {
	var resp BountyContact
	query := fmt.Sprintf("select %s from %s where `bounty_id` = ? and `contact_type` = ? and `contact_address` = ? limit 1", bountyContactRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, bountyId, contactType, contactAddress)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBountyContactModel) Insert(ctx context.Context, data *BountyContact) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, bountyContactRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.BountyId, data.ContactType, data.ContactAddress, data.IsDeleted)
	return ret, err
}

func (m *defaultBountyContactModel) Update(ctx context.Context, newData *BountyContact) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bountyContactRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.BountyId, newData.ContactType, newData.ContactAddress, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultBountyContactModel) tableName() string {
	return m.table
}
