// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	governanceProposalFieldNames          = builder.RawFieldNames(&GovernanceProposal{})
	governanceProposalRows                = strings.Join(governanceProposalFieldNames, ",")
	governanceProposalRowsExpectAutoSet   = strings.Join(stringx.Remove(governanceProposalFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	governanceProposalRowsWithPlaceHolder = strings.Join(stringx.Remove(governanceProposalFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	governanceProposalModel interface {
		Insert(ctx context.Context, data *GovernanceProposal) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovernanceProposal, error)
		Update(ctx context.Context, data *GovernanceProposal) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovernanceProposalModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovernanceProposal struct {
		Id                  int64          `db:"id"`
		StartupId           sql.NullInt64  `db:"startup_id"`
		AuthorComerId       sql.NullInt64  `db:"author_comer_id"`
		AuthorWalletAddress sql.NullString `db:"author_wallet_address"`
		ChainId             sql.NullInt64  `db:"chain_id"`
		BlockNumber         sql.NullInt64  `db:"block_number"`
		ReleaseTimestamp    sql.NullTime   `db:"release_timestamp"`
		IpfsHash            sql.NullString `db:"ipfs_hash"`
		Title               sql.NullString `db:"title"`
		Description         sql.NullString `db:"description"`
		DiscussionLink      sql.NullString `db:"discussion_link"`
		VoteSystem          sql.NullString `db:"vote_system"`
		StartTime           sql.NullTime   `db:"start_time"`
		EndTime             sql.NullTime   `db:"end_time"`
		Status              sql.NullInt64  `db:"status"` // 0:pending 1:upcoming 2:active 3:ended
		CreatedAt           sql.NullTime   `db:"created_at"`
		UpdatedAt           sql.NullTime   `db:"updated_at"`
		IsDeleted           sql.NullInt64  `db:"is_deleted"`
	}
)

func newGovernanceProposalModel(conn sqlx.SqlConn) *defaultGovernanceProposalModel {
	return &defaultGovernanceProposalModel{
		conn:  conn,
		table: "`governance_proposal`",
	}
}

func (m *defaultGovernanceProposalModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovernanceProposalModel) FindOne(ctx context.Context, id int64) (*GovernanceProposal, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", governanceProposalRows, m.table)
	var resp GovernanceProposal
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovernanceProposalModel) Insert(ctx context.Context, data *GovernanceProposal) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, governanceProposalRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.StartupId, data.AuthorComerId, data.AuthorWalletAddress, data.ChainId, data.BlockNumber, data.ReleaseTimestamp, data.IpfsHash, data.Title, data.Description, data.DiscussionLink, data.VoteSystem, data.StartTime, data.EndTime, data.Status, data.IsDeleted)
	return ret, err
}

func (m *defaultGovernanceProposalModel) Update(ctx context.Context, data *GovernanceProposal) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, governanceProposalRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.StartupId, data.AuthorComerId, data.AuthorWalletAddress, data.ChainId, data.BlockNumber, data.ReleaseTimestamp, data.IpfsHash, data.Title, data.Description, data.DiscussionLink, data.VoteSystem, data.StartTime, data.EndTime, data.Status, data.IsDeleted, data.Id)
	return err
}

func (m *defaultGovernanceProposalModel) tableName() string {
	return m.table
}
