// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chainContractFieldNames          = builder.RawFieldNames(&ChainContract{})
	chainContractRows                = strings.Join(chainContractFieldNames, ",")
	chainContractRowsExpectAutoSet   = strings.Join(stringx.Remove(chainContractFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chainContractRowsWithPlaceHolder = strings.Join(stringx.Remove(chainContractFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	chainContractModel interface {
		Insert(ctx context.Context, data *ChainContract) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChainContract, error)
		Update(ctx context.Context, data *ChainContract) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChainContractModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChainContract struct {
		Id            int64     `db:"id"`
		ChainId       int64     `db:"chain_id"`        // Chain ID
		Address       string    `db:"address"`         // Chain contract address
		Project       int64     `db:"project"`         // 1 Startup, 2 Bounty, 3 Crowdfunding, 4 Gover
		Type          int64     `db:"type"`            // 1工厂合约、2子合约
		Version       string    `db:"version"`         // contract version
		Abi           string    `db:"abi"`             // abi json
		CreatedTxHash string    `db:"created_tx_hash"` // created tx hash
		CreatedAt     time.Time `db:"created_at"`
		UpdatedAt     time.Time `db:"updated_at"`
		IsDeleted     int64     `db:"is_deleted"` // Is deleted
	}
)

func newChainContractModel(conn sqlx.SqlConn) *defaultChainContractModel {
	return &defaultChainContractModel{
		conn:  conn,
		table: "`chain_contract`",
	}
}

func (m *defaultChainContractModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChainContractModel) FindOne(ctx context.Context, id int64) (*ChainContract, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chainContractRows, m.table)
	var resp ChainContract
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChainContractModel) Insert(ctx context.Context, data *ChainContract) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, chainContractRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ChainId, data.Address, data.Project, data.Type, data.Version, data.Abi, data.CreatedTxHash, data.IsDeleted)
	return ret, err
}

func (m *defaultChainContractModel) Update(ctx context.Context, data *ChainContract) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chainContractRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ChainId, data.Address, data.Project, data.Type, data.Version, data.Abi, data.CreatedTxHash, data.IsDeleted, data.Id)
	return err
}

func (m *defaultChainContractModel) tableName() string {
	return m.table
}
