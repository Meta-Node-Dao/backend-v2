// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dictDataFieldNames          = builder.RawFieldNames(&DictData{})
	dictDataRows                = strings.Join(dictDataFieldNames, ",")
	dictDataRowsExpectAutoSet   = strings.Join(stringx.Remove(dictDataFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dictDataRowsWithPlaceHolder = strings.Join(stringx.Remove(dictDataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	dictDataModel interface {
		Insert(ctx context.Context, data *DictData) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DictData, error)
		Update(ctx context.Context, data *DictData) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDictDataModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DictData struct {
		Id        int64          `db:"id"`
		StartupId sql.NullInt64  `db:"startup_id"`
		DictType  sql.NullString `db:"dict_type"`
		DictLabel sql.NullString `db:"dict_label"`
		DictValue sql.NullString `db:"dict_value"`
		SeqNum    sql.NullInt64  `db:"seq_num"`
		Status    sql.NullInt64  `db:"status"` // 1:enabled 2:disabled
		Remark    sql.NullString `db:"remark"`
		CreatedAt sql.NullTime   `db:"created_at"`
		UpdatedAt sql.NullTime   `db:"updated_at"`
		IsDeleted sql.NullInt64  `db:"is_deleted"`
	}
)

func newDictDataModel(conn sqlx.SqlConn) *defaultDictDataModel {
	return &defaultDictDataModel{
		conn:  conn,
		table: "`dict_data`",
	}
}

func (m *defaultDictDataModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDictDataModel) FindOne(ctx context.Context, id int64) (*DictData, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dictDataRows, m.table)
	var resp DictData
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDictDataModel) Insert(ctx context.Context, data *DictData) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, dictDataRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.StartupId, data.DictType, data.DictLabel, data.DictValue, data.SeqNum, data.Status, data.Remark, data.IsDeleted)
	return ret, err
}

func (m *defaultDictDataModel) Update(ctx context.Context, data *DictData) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dictDataRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.StartupId, data.DictType, data.DictLabel, data.DictValue, data.SeqNum, data.Status, data.Remark, data.IsDeleted, data.Id)
	return err
}

func (m *defaultDictDataModel) tableName() string {
	return m.table
}
