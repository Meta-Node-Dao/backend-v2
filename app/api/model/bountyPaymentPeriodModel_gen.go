// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bountyPaymentPeriodFieldNames          = builder.RawFieldNames(&BountyPaymentPeriod{})
	bountyPaymentPeriodRows                = strings.Join(bountyPaymentPeriodFieldNames, ",")
	bountyPaymentPeriodRowsExpectAutoSet   = strings.Join(stringx.Remove(bountyPaymentPeriodFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bountyPaymentPeriodRowsWithPlaceHolder = strings.Join(stringx.Remove(bountyPaymentPeriodFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bountyPaymentPeriodModel interface {
		Insert(ctx context.Context, data *BountyPaymentPeriod) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BountyPaymentPeriod, error)
		FindOneByBountyId(ctx context.Context, bountyId sql.NullInt64) (*BountyPaymentPeriod, error)
		Update(ctx context.Context, data *BountyPaymentPeriod) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBountyPaymentPeriodModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BountyPaymentPeriod struct {
		Id           int64          `db:"id"`
		BountyId     sql.NullInt64  `db:"bounty_id"`
		PeriodType   sql.NullInt64  `db:"period_type"`
		PeriodAmount sql.NullInt64  `db:"period_amount"`
		HoursPerDay  sql.NullInt64  `db:"hours_per_day"`
		Token1Symbol sql.NullString `db:"token1_symbol"`
		Token1Amount sql.NullInt64  `db:"token1_amount"`
		Token2Symbol sql.NullString `db:"token2_symbol"`
		Token2Amount sql.NullInt64  `db:"token2_amount"`
		Target       sql.NullString `db:"target"`
		CreatedAt    sql.NullTime   `db:"created_at"`
		UpdatedAt    sql.NullTime   `db:"updated_at"`
		IsDeleted    sql.NullInt64  `db:"is_deleted"`
	}
)

func newBountyPaymentPeriodModel(conn sqlx.SqlConn) *defaultBountyPaymentPeriodModel {
	return &defaultBountyPaymentPeriodModel{
		conn:  conn,
		table: "`bounty_payment_period`",
	}
}

func (m *defaultBountyPaymentPeriodModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBountyPaymentPeriodModel) FindOne(ctx context.Context, id int64) (*BountyPaymentPeriod, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bountyPaymentPeriodRows, m.table)
	var resp BountyPaymentPeriod
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBountyPaymentPeriodModel) FindOneByBountyId(ctx context.Context, bountyId sql.NullInt64) (*BountyPaymentPeriod, error) {
	var resp BountyPaymentPeriod
	query := fmt.Sprintf("select %s from %s where `bounty_id` = ? limit 1", bountyPaymentPeriodRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, bountyId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBountyPaymentPeriodModel) Insert(ctx context.Context, data *BountyPaymentPeriod) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bountyPaymentPeriodRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.BountyId, data.PeriodType, data.PeriodAmount, data.HoursPerDay, data.Token1Symbol, data.Token1Amount, data.Token2Symbol, data.Token2Amount, data.Target, data.IsDeleted)
	return ret, err
}

func (m *defaultBountyPaymentPeriodModel) Update(ctx context.Context, newData *BountyPaymentPeriod) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bountyPaymentPeriodRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.BountyId, newData.PeriodType, newData.PeriodAmount, newData.HoursPerDay, newData.Token1Symbol, newData.Token1Amount, newData.Token2Symbol, newData.Token2Amount, newData.Target, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultBountyPaymentPeriodModel) tableName() string {
	return m.table
}
