// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bountyPaymentTermsFieldNames          = builder.RawFieldNames(&BountyPaymentTerms{})
	bountyPaymentTermsRows                = strings.Join(bountyPaymentTermsFieldNames, ",")
	bountyPaymentTermsRowsExpectAutoSet   = strings.Join(stringx.Remove(bountyPaymentTermsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bountyPaymentTermsRowsWithPlaceHolder = strings.Join(stringx.Remove(bountyPaymentTermsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bountyPaymentTermsModel interface {
		Insert(ctx context.Context, data *BountyPaymentTerms) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BountyPaymentTerms, error)
		Update(ctx context.Context, data *BountyPaymentTerms) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBountyPaymentTermsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BountyPaymentTerms struct {
		Id           int64          `db:"id"`
		BountyId     sql.NullInt64  `db:"bounty_id"`
		PaymentMode  sql.NullInt64  `db:"payment_mode"`
		Token1Symbol sql.NullString `db:"token1_symbol"`
		Token1Amount sql.NullInt64  `db:"token1_amount"`
		Token2Symbol sql.NullString `db:"token2_symbol"`
		Token2Amount sql.NullInt64  `db:"token2_amount"`
		Terms        sql.NullString `db:"terms"`
		SeqNum       sql.NullInt64  `db:"seq_num"`
		Status       sql.NullInt64  `db:"status"`
		CreatedAt    sql.NullTime   `db:"created_at"`
		UpdatedAt    sql.NullTime   `db:"updated_at"`
		IsDeleted    sql.NullInt64  `db:"is_deleted"`
	}
)

func newBountyPaymentTermsModel(conn sqlx.SqlConn) *defaultBountyPaymentTermsModel {
	return &defaultBountyPaymentTermsModel{
		conn:  conn,
		table: "`bounty_payment_terms`",
	}
}

func (m *defaultBountyPaymentTermsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBountyPaymentTermsModel) FindOne(ctx context.Context, id int64) (*BountyPaymentTerms, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bountyPaymentTermsRows, m.table)
	var resp BountyPaymentTerms
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBountyPaymentTermsModel) Insert(ctx context.Context, data *BountyPaymentTerms) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bountyPaymentTermsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.BountyId, data.PaymentMode, data.Token1Symbol, data.Token1Amount, data.Token2Symbol, data.Token2Amount, data.Terms, data.SeqNum, data.Status, data.IsDeleted)
	return ret, err
}

func (m *defaultBountyPaymentTermsModel) Update(ctx context.Context, data *BountyPaymentTerms) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bountyPaymentTermsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.BountyId, data.PaymentMode, data.Token1Symbol, data.Token1Amount, data.Token2Symbol, data.Token2Amount, data.Terms, data.SeqNum, data.Status, data.IsDeleted, data.Id)
	return err
}

func (m *defaultBountyPaymentTermsModel) tableName() string {
	return m.table
}
