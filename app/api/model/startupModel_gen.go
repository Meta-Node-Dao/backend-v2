// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	startupFieldNames          = builder.RawFieldNames(&Startup{})
	startupRows                = strings.Join(startupFieldNames, ",")
	startupRowsExpectAutoSet   = strings.Join(stringx.Remove(startupFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	startupRowsWithPlaceHolder = strings.Join(stringx.Remove(startupFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	startupModel interface {
		Insert(ctx context.Context, data *Startup) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Startup, error)
		FindOneByName(ctx context.Context, name string) (*Startup, error)
		FindOneByTokenContractAddress(ctx context.Context, tokenContractAddress string) (*Startup, error)
		Update(ctx context.Context, data *Startup) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStartupModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Startup struct {
		Id                   int64          `db:"id"`
		ComerId              int64          `db:"comer_id"` // comer_id
		Name                 string         `db:"name"`     // name
		Mode                 int64          `db:"mode"`     // 0:NONE, 1:ESG, 2:NGO, 3:DAO, 4:COM
		Logo                 string         `db:"logo"`     // logo
		Cover                sql.NullString `db:"cover"`
		Mission              string         `db:"mission"`                // logo
		TokenContractAddress string         `db:"token_contract_address"` // token contract address
		Overview             string         `db:"overview"`               // overview
		TxHash               sql.NullString `db:"tx_hash"`
		OnChain              int64          `db:"on_chain"`       // whether it is on the chain
		Kyc                  sql.NullString `db:"kyc"`            // KYC
		ContractAudit        sql.NullString `db:"contract_audit"` // contract audit
		Website              sql.NullString `db:"website"`        // website
		Discord              sql.NullString `db:"discord"`        // discord
		Twitter              sql.NullString `db:"twitter"`        // twitter
		Telegram             sql.NullString `db:"telegram"`       // telegram
		Docs                 sql.NullString `db:"docs"`           // docs
		Email                sql.NullString `db:"email"`
		Facebook             sql.NullString `db:"facebook"`
		Medium               sql.NullString `db:"medium"`
		Linktree             sql.NullString `db:"linktree"`
		LaunchNetwork        sql.NullInt64  `db:"launch_network"` // chain id
		TokenName            sql.NullString `db:"token_name"`     // token name
		TokenSymbol          sql.NullString `db:"token_symbol"`   // token symbol
		TotalSupply          sql.NullInt64  `db:"total_supply"`   // total supply
		PresaleStart         sql.NullTime   `db:"presale_start"`  // presale start date
		PresaleEnd           sql.NullTime   `db:"presale_end"`    // presale end date
		LaunchDate           sql.NullTime   `db:"launch_date"`    // launch_date
		TabSequence          sql.NullString `db:"tab_sequence"`
		CreatedAt            time.Time      `db:"created_at"`
		UpdatedAt            time.Time      `db:"updated_at"`
		IsDeleted            int64          `db:"is_deleted"` // Is Deleted
	}
)

func newStartupModel(conn sqlx.SqlConn) *defaultStartupModel {
	return &defaultStartupModel{
		conn:  conn,
		table: "`startup`",
	}
}

func (m *defaultStartupModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStartupModel) FindOne(ctx context.Context, id int64) (*Startup, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", startupRows, m.table)
	var resp Startup
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStartupModel) FindOneByName(ctx context.Context, name string) (*Startup, error) {
	var resp Startup
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", startupRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStartupModel) FindOneByTokenContractAddress(ctx context.Context, tokenContractAddress string) (*Startup, error) {
	var resp Startup
	query := fmt.Sprintf("select %s from %s where `token_contract_address` = ? limit 1", startupRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, tokenContractAddress)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStartupModel) Insert(ctx context.Context, data *Startup) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, startupRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ComerId, data.Name, data.Mode, data.Logo, data.Cover, data.Mission, data.TokenContractAddress, data.Overview, data.TxHash, data.OnChain, data.Kyc, data.ContractAudit, data.Website, data.Discord, data.Twitter, data.Telegram, data.Docs, data.Email, data.Facebook, data.Medium, data.Linktree, data.LaunchNetwork, data.TokenName, data.TokenSymbol, data.TotalSupply, data.PresaleStart, data.PresaleEnd, data.LaunchDate, data.TabSequence, data.IsDeleted)
	return ret, err
}

func (m *defaultStartupModel) Update(ctx context.Context, newData *Startup) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, startupRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ComerId, newData.Name, newData.Mode, newData.Logo, newData.Cover, newData.Mission, newData.TokenContractAddress, newData.Overview, newData.TxHash, newData.OnChain, newData.Kyc, newData.ContractAudit, newData.Website, newData.Discord, newData.Twitter, newData.Telegram, newData.Docs, newData.Email, newData.Facebook, newData.Medium, newData.Linktree, newData.LaunchNetwork, newData.TokenName, newData.TokenSymbol, newData.TotalSupply, newData.PresaleStart, newData.PresaleEnd, newData.LaunchDate, newData.TabSequence, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultStartupModel) tableName() string {
	return m.table
}
