// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	transactionFieldNames          = builder.RawFieldNames(&Transaction{})
	transactionRows                = strings.Join(transactionFieldNames, ",")
	transactionRowsExpectAutoSet   = strings.Join(stringx.Remove(transactionFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	transactionRowsWithPlaceHolder = strings.Join(stringx.Remove(transactionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	transactionModel interface {
		Insert(ctx context.Context, data *Transaction) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Transaction, error)
		FindOneByChainIdTxHash(ctx context.Context, chainId sql.NullInt64, txHash sql.NullString) (*Transaction, error)
		Update(ctx context.Context, data *Transaction) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTransactionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Transaction struct {
		Id         int64          `db:"id"`
		ChainId    sql.NullInt64  `db:"chain_id"`
		TxHash     sql.NullString `db:"tx_hash"`
		Timestamp  sql.NullTime   `db:"timestamp"`
		Status     sql.NullInt64  `db:"status"` // 0:Pending 1:Success 2:Failure
		SourceType sql.NullInt64  `db:"source_type"`
		SourceId   sql.NullInt64  `db:"source_id"`
		RetryTimes sql.NullInt64  `db:"retry_times"`
		CreatedAt  sql.NullTime   `db:"created_at"`
		UpdatedAt  sql.NullTime   `db:"updated_at"`
		IsDeleted  sql.NullInt64  `db:"is_deleted"`
	}
)

func newTransactionModel(conn sqlx.SqlConn) *defaultTransactionModel {
	return &defaultTransactionModel{
		conn:  conn,
		table: "`transaction`",
	}
}

func (m *defaultTransactionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTransactionModel) FindOne(ctx context.Context, id int64) (*Transaction, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", transactionRows, m.table)
	var resp Transaction
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTransactionModel) FindOneByChainIdTxHash(ctx context.Context, chainId sql.NullInt64, txHash sql.NullString) (*Transaction, error) {
	var resp Transaction
	query := fmt.Sprintf("select %s from %s where `chain_id` = ? and `tx_hash` = ? limit 1", transactionRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, chainId, txHash)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTransactionModel) Insert(ctx context.Context, data *Transaction) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, transactionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ChainId, data.TxHash, data.Timestamp, data.Status, data.SourceType, data.SourceId, data.RetryTimes, data.IsDeleted)
	return ret, err
}

func (m *defaultTransactionModel) Update(ctx context.Context, newData *Transaction) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, transactionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ChainId, newData.TxHash, newData.Timestamp, newData.Status, newData.SourceType, newData.SourceId, newData.RetryTimes, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultTransactionModel) tableName() string {
	return m.table
}
