// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	comerProfileFieldNames          = builder.RawFieldNames(&ComerProfile{})
	comerProfileRows                = strings.Join(comerProfileFieldNames, ",")
	comerProfileRowsExpectAutoSet   = strings.Join(stringx.Remove(comerProfileFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	comerProfileRowsWithPlaceHolder = strings.Join(stringx.Remove(comerProfileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	comerProfileModel interface {
		Insert(ctx context.Context, data *ComerProfile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ComerProfile, error)
		FindOneByComerId(ctx context.Context, comerId int64) (*ComerProfile, error)
		Update(ctx context.Context, data *ComerProfile) error
		Delete(ctx context.Context, id int64) error
	}

	defaultComerProfileModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ComerProfile struct {
		Id         int64          `db:"id"`
		ComerId    int64          `db:"comer_id"`
		Name       string         `db:"name"`   // name
		Avatar     string         `db:"avatar"` // avatar
		Cover      sql.NullString `db:"cover"`
		Location   string         `db:"location"`  // location city
		TimeZone   sql.NullString `db:"time_zone"` // time zone: UTC-09:30
		Website    string         `db:"website"`   // website
		Email      sql.NullString `db:"email"`     // email
		Twitter    sql.NullString `db:"twitter"`   // twitter
		Discord    sql.NullString `db:"discord"`   // discord
		Telegram   sql.NullString `db:"telegram"`  // telegram
		Medium     sql.NullString `db:"medium"`    // medium
		Facebook   sql.NullString `db:"facebook"`
		Linktree   sql.NullString `db:"linktree"`
		Bio        sql.NullString `db:"bio"` // bio
		Languages  sql.NullString `db:"languages"`
		Educations sql.NullString `db:"educations"`
		CreatedAt  time.Time      `db:"created_at"`
		UpdatedAt  time.Time      `db:"updated_at"`
		IsDeleted  int64          `db:"is_deleted"` // Is Deleted
	}
)

func newComerProfileModel(conn sqlx.SqlConn) *defaultComerProfileModel {
	return &defaultComerProfileModel{
		conn:  conn,
		table: "`comer_profile`",
	}
}

func (m *defaultComerProfileModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultComerProfileModel) FindOne(ctx context.Context, id int64) (*ComerProfile, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", comerProfileRows, m.table)
	var resp ComerProfile
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultComerProfileModel) FindOneByComerId(ctx context.Context, comerId int64) (*ComerProfile, error) {
	var resp ComerProfile
	query := fmt.Sprintf("select %s from %s where `comer_id` = ? limit 1", comerProfileRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, comerId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultComerProfileModel) Insert(ctx context.Context, data *ComerProfile) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, comerProfileRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ComerId, data.Name, data.Avatar, data.Cover, data.Location, data.TimeZone, data.Website, data.Email, data.Twitter, data.Discord, data.Telegram, data.Medium, data.Facebook, data.Linktree, data.Bio, data.Languages, data.Educations, data.IsDeleted)
	return ret, err
}

func (m *defaultComerProfileModel) Update(ctx context.Context, newData *ComerProfile) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, comerProfileRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ComerId, newData.Name, newData.Avatar, newData.Cover, newData.Location, newData.TimeZone, newData.Website, newData.Email, newData.Twitter, newData.Discord, newData.Telegram, newData.Medium, newData.Facebook, newData.Linktree, newData.Bio, newData.Languages, newData.Educations, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultComerProfileModel) tableName() string {
	return m.table
}
