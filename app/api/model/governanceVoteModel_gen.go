// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	governanceVoteFieldNames          = builder.RawFieldNames(&GovernanceVote{})
	governanceVoteRows                = strings.Join(governanceVoteFieldNames, ",")
	governanceVoteRowsExpectAutoSet   = strings.Join(stringx.Remove(governanceVoteFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	governanceVoteRowsWithPlaceHolder = strings.Join(stringx.Remove(governanceVoteFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	governanceVoteModel interface {
		Insert(ctx context.Context, data *GovernanceVote) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovernanceVote, error)
		Update(ctx context.Context, data *GovernanceVote) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovernanceVoteModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovernanceVote struct {
		Id                 int64           `db:"id"`
		ProposalId         sql.NullInt64   `db:"proposal_id"`
		VoterComerId       sql.NullInt64   `db:"voter_comer_id"`
		VoterWalletAddress sql.NullString  `db:"voter_wallet_address"`
		ChoiceItemId       sql.NullInt64   `db:"choice_item_id"`
		ChoiceItemName     sql.NullString  `db:"choice_item_name"`
		Votes              sql.NullFloat64 `db:"votes"`
		IpfsHash           sql.NullString  `db:"ipfs_hash"`
		CreatedAt          sql.NullTime    `db:"created_at"`
		UpdatedAt          sql.NullTime    `db:"updated_at"`
		IsDeleted          sql.NullInt64   `db:"is_deleted"`
	}
)

func newGovernanceVoteModel(conn sqlx.SqlConn) *defaultGovernanceVoteModel {
	return &defaultGovernanceVoteModel{
		conn:  conn,
		table: "`governance_vote`",
	}
}

func (m *defaultGovernanceVoteModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovernanceVoteModel) FindOne(ctx context.Context, id int64) (*GovernanceVote, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", governanceVoteRows, m.table)
	var resp GovernanceVote
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovernanceVoteModel) Insert(ctx context.Context, data *GovernanceVote) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, governanceVoteRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ProposalId, data.VoterComerId, data.VoterWalletAddress, data.ChoiceItemId, data.ChoiceItemName, data.Votes, data.IpfsHash, data.IsDeleted)
	return ret, err
}

func (m *defaultGovernanceVoteModel) Update(ctx context.Context, data *GovernanceVote) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, governanceVoteRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProposalId, data.VoterComerId, data.VoterWalletAddress, data.ChoiceItemId, data.ChoiceItemName, data.Votes, data.IpfsHash, data.IsDeleted, data.Id)
	return err
}

func (m *defaultGovernanceVoteModel) tableName() string {
	return m.table
}
