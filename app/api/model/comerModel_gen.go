// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	comerFieldNames          = builder.RawFieldNames(&Comer{})
	comerRows                = strings.Join(comerFieldNames, ",")
	comerRowsExpectAutoSet   = strings.Join(stringx.Remove(comerFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	comerRowsWithPlaceHolder = strings.Join(stringx.Remove(comerFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	comerModel interface {
		Insert(ctx context.Context, data *Comer) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Comer, error)
		FindOneByAddress(ctx context.Context, address sql.NullString) (*Comer, error)
		Update(ctx context.Context, data *Comer) error
		Delete(ctx context.Context, id int64) error
	}

	defaultComerModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Comer struct {
		Id        int64          `db:"id"`
		Address   sql.NullString `db:"address"` // comer could save some useful info on block chain with this address
		CreatedAt time.Time      `db:"created_at"`
		UpdatedAt time.Time      `db:"updated_at"`
		IsDeleted int64          `db:"is_deleted"` // Is Deleted
	}
)

func newComerModel(conn sqlx.SqlConn) *defaultComerModel {
	return &defaultComerModel{
		conn:  conn,
		table: "`comer`",
	}
}

func (m *defaultComerModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultComerModel) FindOne(ctx context.Context, id int64) (*Comer, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", comerRows, m.table)
	var resp Comer
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultComerModel) FindOneByAddress(ctx context.Context, address sql.NullString) (*Comer, error) {
	var resp Comer
	query := fmt.Sprintf("select %s from %s where `address` = ? limit 1", comerRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, address)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultComerModel) Insert(ctx context.Context, data *Comer) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, comerRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Address, data.IsDeleted)
	return ret, err
}

func (m *defaultComerModel) Update(ctx context.Context, newData *Comer) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, comerRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Address, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultComerModel) tableName() string {
	return m.table
}
