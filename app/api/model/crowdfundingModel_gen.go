// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	crowdfundingFieldNames          = builder.RawFieldNames(&Crowdfunding{})
	crowdfundingRows                = strings.Join(crowdfundingFieldNames, ",")
	crowdfundingRowsExpectAutoSet   = strings.Join(stringx.Remove(crowdfundingFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	crowdfundingRowsWithPlaceHolder = strings.Join(stringx.Remove(crowdfundingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	crowdfundingModel interface {
		Insert(ctx context.Context, data *Crowdfunding) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Crowdfunding, error)
		FindOneByChainIdTxHash(ctx context.Context, chainId int64, txHash string) (*Crowdfunding, error)
		Update(ctx context.Context, data *Crowdfunding) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCrowdfundingModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Crowdfunding struct {
		Id                   int64           `db:"id"`                    // crowdfunding id
		ChainId              int64           `db:"chain_id"`              // Chain id
		TxHash               string          `db:"tx_hash"`               // Tx hash
		CrowdfundingContract sql.NullString  `db:"crowdfunding_contract"` // Crowdfunding contract address
		StartupId            int64           `db:"startup_id"`            // Startup id
		ComerId              int64           `db:"comer_id"`              // Founder's comer id
		RaiseGoal            float64         `db:"raise_goal"`            // Raise goal total
		RaiseBalance         float64         `db:"raise_balance"`         // Raise token balance
		SellTokenContract    string          `db:"sell_token_contract"`   // Sell token contract address
		SellTokenName        sql.NullString  `db:"sell_token_name"`       // Sell token name
		SellTokenSymbol      sql.NullString  `db:"sell_token_symbol"`     // Sell token symbol
		SellTokenDecimals    sql.NullInt64   `db:"sell_token_decimals"`   // Sell token decimals
		SellTokenSupply      sql.NullFloat64 `db:"sell_token_supply"`     // Sell token total supply
		SellTokenDeposit     float64         `db:"sell_token_deposit"`    // Sell token deposit
		SellTokenBalance     float64         `db:"sell_token_balance"`    // Sell token balance
		BuyTokenContract     string          `db:"buy_token_contract"`    // Buy token contract address
		BuyTokenName         sql.NullString  `db:"buy_token_name"`        // Buy token name
		BuyTokenSymbol       sql.NullString  `db:"buy_token_symbol"`      // Buy token symbol
		BuyTokenDecimals     sql.NullInt64   `db:"buy_token_decimals"`    // Buy token decimals
		BuyTokenSupply       sql.NullFloat64 `db:"buy_token_supply"`      // Buy token total supply
		TeamWallet           string          `db:"team_wallet"`           // Team wallet address
		SwapPercent          float64         `db:"swap_percent"`          // Swap percent
		BuyPrice             float64         `db:"buy_price"`             // IBO rate
		MaxBuyAmount         float64         `db:"max_buy_amount"`        // Maximum buy amount
		MaxSellPercent       float64         `db:"max_sell_percent"`      // Maximum selling percent
		SellTax              float64         `db:"sell_tax"`              // Selling tax
		StartTime            time.Time       `db:"start_time"`            // Start time
		EndTime              time.Time       `db:"end_time"`              // End time
		Poster               string          `db:"poster"`                // Poster url
		Youtube              sql.NullString  `db:"youtube"`               // Youtube link
		Detail               sql.NullString  `db:"detail"`                // Detail url
		Description          string          `db:"description"`           // Description content
		Status               int64           `db:"status"`                // 0:Pending 1:Upcoming 2:Live 3:Ended 4:Cancelled 5:Failure
		CreatedAt            time.Time       `db:"created_at"`
		UpdatedAt            time.Time       `db:"updated_at"`
		IsDeleted            int64           `db:"is_deleted"` // Is deleted
	}
)

func newCrowdfundingModel(conn sqlx.SqlConn) *defaultCrowdfundingModel {
	return &defaultCrowdfundingModel{
		conn:  conn,
		table: "`crowdfunding`",
	}
}

func (m *defaultCrowdfundingModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCrowdfundingModel) FindOne(ctx context.Context, id int64) (*Crowdfunding, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", crowdfundingRows, m.table)
	var resp Crowdfunding
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCrowdfundingModel) FindOneByChainIdTxHash(ctx context.Context, chainId int64, txHash string) (*Crowdfunding, error) {
	var resp Crowdfunding
	query := fmt.Sprintf("select %s from %s where `chain_id` = ? and `tx_hash` = ? limit 1", crowdfundingRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, chainId, txHash)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCrowdfundingModel) Insert(ctx context.Context, data *Crowdfunding) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, crowdfundingRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ChainId, data.TxHash, data.CrowdfundingContract, data.StartupId, data.ComerId, data.RaiseGoal, data.RaiseBalance, data.SellTokenContract, data.SellTokenName, data.SellTokenSymbol, data.SellTokenDecimals, data.SellTokenSupply, data.SellTokenDeposit, data.SellTokenBalance, data.BuyTokenContract, data.BuyTokenName, data.BuyTokenSymbol, data.BuyTokenDecimals, data.BuyTokenSupply, data.TeamWallet, data.SwapPercent, data.BuyPrice, data.MaxBuyAmount, data.MaxSellPercent, data.SellTax, data.StartTime, data.EndTime, data.Poster, data.Youtube, data.Detail, data.Description, data.Status, data.IsDeleted)
	return ret, err
}

func (m *defaultCrowdfundingModel) Update(ctx context.Context, newData *Crowdfunding) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, crowdfundingRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ChainId, newData.TxHash, newData.CrowdfundingContract, newData.StartupId, newData.ComerId, newData.RaiseGoal, newData.RaiseBalance, newData.SellTokenContract, newData.SellTokenName, newData.SellTokenSymbol, newData.SellTokenDecimals, newData.SellTokenSupply, newData.SellTokenDeposit, newData.SellTokenBalance, newData.BuyTokenContract, newData.BuyTokenName, newData.BuyTokenSymbol, newData.BuyTokenDecimals, newData.BuyTokenSupply, newData.TeamWallet, newData.SwapPercent, newData.BuyPrice, newData.MaxBuyAmount, newData.MaxSellPercent, newData.SellTax, newData.StartTime, newData.EndTime, newData.Poster, newData.Youtube, newData.Detail, newData.Description, newData.Status, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultCrowdfundingModel) tableName() string {
	return m.table
}
