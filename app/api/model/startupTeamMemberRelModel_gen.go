// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	startupTeamMemberRelFieldNames          = builder.RawFieldNames(&StartupTeamMemberRel{})
	startupTeamMemberRelRows                = strings.Join(startupTeamMemberRelFieldNames, ",")
	startupTeamMemberRelRowsExpectAutoSet   = strings.Join(stringx.Remove(startupTeamMemberRelFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	startupTeamMemberRelRowsWithPlaceHolder = strings.Join(stringx.Remove(startupTeamMemberRelFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	startupTeamMemberRelModel interface {
		Insert(ctx context.Context, data *StartupTeamMemberRel) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StartupTeamMemberRel, error)
		FindOneByComerIdStartupId(ctx context.Context, comerId int64, startupId int64) (*StartupTeamMemberRel, error)
		Update(ctx context.Context, data *StartupTeamMemberRel) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStartupTeamMemberRelModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StartupTeamMemberRel struct {
		Id        int64     `db:"id"`
		ComerId   int64     `db:"comer_id"`   // comer_id
		StartupId int64     `db:"startup_id"` // startup_id
		Position  string    `db:"position"`   // title
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newStartupTeamMemberRelModel(conn sqlx.SqlConn) *defaultStartupTeamMemberRelModel {
	return &defaultStartupTeamMemberRelModel{
		conn:  conn,
		table: "`startup_team_member_rel`",
	}
}

func (m *defaultStartupTeamMemberRelModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStartupTeamMemberRelModel) FindOne(ctx context.Context, id int64) (*StartupTeamMemberRel, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", startupTeamMemberRelRows, m.table)
	var resp StartupTeamMemberRel
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStartupTeamMemberRelModel) FindOneByComerIdStartupId(ctx context.Context, comerId int64, startupId int64) (*StartupTeamMemberRel, error) {
	var resp StartupTeamMemberRel
	query := fmt.Sprintf("select %s from %s where `comer_id` = ? and `startup_id` = ? limit 1", startupTeamMemberRelRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, comerId, startupId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStartupTeamMemberRelModel) Insert(ctx context.Context, data *StartupTeamMemberRel) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, startupTeamMemberRelRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ComerId, data.StartupId, data.Position)
	return ret, err
}

func (m *defaultStartupTeamMemberRelModel) Update(ctx context.Context, newData *StartupTeamMemberRel) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, startupTeamMemberRelRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ComerId, newData.StartupId, newData.Position, newData.Id)
	return err
}

func (m *defaultStartupTeamMemberRelModel) tableName() string {
	return m.table
}
