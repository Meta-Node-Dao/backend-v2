// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chainEndpointFieldNames          = builder.RawFieldNames(&ChainEndpoint{})
	chainEndpointRows                = strings.Join(chainEndpointFieldNames, ",")
	chainEndpointRowsExpectAutoSet   = strings.Join(stringx.Remove(chainEndpointFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chainEndpointRowsWithPlaceHolder = strings.Join(stringx.Remove(chainEndpointFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	chainEndpointModel interface {
		Insert(ctx context.Context, data *ChainEndpoint) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChainEndpoint, error)
		Update(ctx context.Context, data *ChainEndpoint) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChainEndpointModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChainEndpoint struct {
		Id        int64     `db:"id"`
		Protocol  int64     `db:"protocol"` // Communication protocol, 1-rpc 2-wss
		ChainId   int64     `db:"chain_id"` // Chain ID
		Url       string    `db:"url"`      // Chain name
		Status    int64     `db:"status"`   // 1-normal, 2-disable
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
		IsDeleted int64     `db:"is_deleted"` // Is deleted
	}
)

func newChainEndpointModel(conn sqlx.SqlConn) *defaultChainEndpointModel {
	return &defaultChainEndpointModel{
		conn:  conn,
		table: "`chain_endpoint`",
	}
}

func (m *defaultChainEndpointModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChainEndpointModel) FindOne(ctx context.Context, id int64) (*ChainEndpoint, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chainEndpointRows, m.table)
	var resp ChainEndpoint
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChainEndpointModel) Insert(ctx context.Context, data *ChainEndpoint) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, chainEndpointRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Protocol, data.ChainId, data.Url, data.Status, data.IsDeleted)
	return ret, err
}

func (m *defaultChainEndpointModel) Update(ctx context.Context, data *ChainEndpoint) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chainEndpointRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Protocol, data.ChainId, data.Url, data.Status, data.IsDeleted, data.Id)
	return err
}

func (m *defaultChainEndpointModel) tableName() string {
	return m.table
}
