// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tagTargetRelFieldNames          = builder.RawFieldNames(&TagTargetRel{})
	tagTargetRelRows                = strings.Join(tagTargetRelFieldNames, ",")
	tagTargetRelRowsExpectAutoSet   = strings.Join(stringx.Remove(tagTargetRelFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tagTargetRelRowsWithPlaceHolder = strings.Join(stringx.Remove(tagTargetRelFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tagTargetRelModel interface {
		Insert(ctx context.Context, data *TagTargetRel) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TagTargetRel, error)
		FindOneByTargetTargetIdTagId(ctx context.Context, target string, targetId int64, tagId int64) (*TagTargetRel, error)
		Update(ctx context.Context, data *TagTargetRel) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTagTargetRelModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TagTargetRel struct {
		Id        int64     `db:"id"`
		Target    string    `db:"target"`    // comerSkill,startup
		TargetId  int64     `db:"target_id"` // target id
		TagId     int64     `db:"tag_id"`    // skill id
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newTagTargetRelModel(conn sqlx.SqlConn) *defaultTagTargetRelModel {
	return &defaultTagTargetRelModel{
		conn:  conn,
		table: "`tag_target_rel`",
	}
}

func (m *defaultTagTargetRelModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTagTargetRelModel) FindOne(ctx context.Context, id int64) (*TagTargetRel, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tagTargetRelRows, m.table)
	var resp TagTargetRel
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTagTargetRelModel) FindOneByTargetTargetIdTagId(ctx context.Context, target string, targetId int64, tagId int64) (*TagTargetRel, error) {
	var resp TagTargetRel
	query := fmt.Sprintf("select %s from %s where `target` = ? and `target_id` = ? and `tag_id` = ? limit 1", tagTargetRelRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, target, targetId, tagId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTagTargetRelModel) Insert(ctx context.Context, data *TagTargetRel) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tagTargetRelRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Target, data.TargetId, data.TagId)
	return ret, err
}

func (m *defaultTagTargetRelModel) Update(ctx context.Context, newData *TagTargetRel) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tagTargetRelRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Target, newData.TargetId, newData.TagId, newData.Id)
	return err
}

func (m *defaultTagTargetRelModel) tableName() string {
	return m.table
}
