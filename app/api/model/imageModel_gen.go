// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	imageFieldNames          = builder.RawFieldNames(&Image{})
	imageRows                = strings.Join(imageFieldNames, ",")
	imageRowsExpectAutoSet   = strings.Join(stringx.Remove(imageFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	imageRowsWithPlaceHolder = strings.Join(stringx.Remove(imageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	imageModel interface {
		Insert(ctx context.Context, data *Image) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Image, error)
		FindOneByCategoryName(ctx context.Context, category string, name string) (*Image, error)
		Update(ctx context.Context, data *Image) error
		Delete(ctx context.Context, id int64) error
	}

	defaultImageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Image struct {
		Id        int64     `db:"id"`
		Category  string    `db:"category"`
		Name      string    `db:"name"` // name
		Url       string    `db:"url"`  // url
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
		IsDeleted int64     `db:"is_deleted"` // Is Deleted
	}
)

func newImageModel(conn sqlx.SqlConn) *defaultImageModel {
	return &defaultImageModel{
		conn:  conn,
		table: "`image`",
	}
}

func (m *defaultImageModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultImageModel) FindOne(ctx context.Context, id int64) (*Image, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", imageRows, m.table)
	var resp Image
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultImageModel) FindOneByCategoryName(ctx context.Context, category string, name string) (*Image, error) {
	var resp Image
	query := fmt.Sprintf("select %s from %s where `category` = ? and `name` = ? limit 1", imageRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, category, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultImageModel) Insert(ctx context.Context, data *Image) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, imageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Category, data.Name, data.Url, data.IsDeleted)
	return ret, err
}

func (m *defaultImageModel) Update(ctx context.Context, newData *Image) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, imageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Category, newData.Name, newData.Url, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultImageModel) tableName() string {
	return m.table
}
