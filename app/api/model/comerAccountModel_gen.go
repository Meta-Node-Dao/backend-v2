// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	comerAccountFieldNames          = builder.RawFieldNames(&ComerAccount{})
	comerAccountRows                = strings.Join(comerAccountFieldNames, ",")
	comerAccountRowsExpectAutoSet   = strings.Join(stringx.Remove(comerAccountFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	comerAccountRowsWithPlaceHolder = strings.Join(stringx.Remove(comerAccountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	comerAccountModel interface {
		Insert(ctx context.Context, data *ComerAccount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ComerAccount, error)
		FindOneByOin(ctx context.Context, oin string) (*ComerAccount, error)
		Update(ctx context.Context, data *ComerAccount) error
		Delete(ctx context.Context, id int64) error
	}

	defaultComerAccountModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ComerAccount struct {
		Id        int64     `db:"id"`
		ComerId   int64     `db:"comer_id"`   // comer unique identifier
		Oin       string    `db:"oin"`        // comer outer account unique identifier, wallet will be public key and Oauth is the OauthID
		IsPrimary int64     `db:"is_primary"` // comer use this account as primay account
		Nick      string    `db:"nick"`       // comer nick name
		Avatar    string    `db:"avatar"`     // avatar link address
		Type      int64     `db:"type"`       // 1 for github  2 for google 3 for twitter 4 for facebook 5 for likedin
		IsLinked  int64     `db:"is_linked"`  // 0 for unlink 1 for linked
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
		IsDeleted int64     `db:"is_deleted"` // Is Deleted
	}
)

func newComerAccountModel(conn sqlx.SqlConn) *defaultComerAccountModel {
	return &defaultComerAccountModel{
		conn:  conn,
		table: "`comer_account`",
	}
}

func (m *defaultComerAccountModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultComerAccountModel) FindOne(ctx context.Context, id int64) (*ComerAccount, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", comerAccountRows, m.table)
	var resp ComerAccount
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultComerAccountModel) FindOneByOin(ctx context.Context, oin string) (*ComerAccount, error) {
	var resp ComerAccount
	query := fmt.Sprintf("select %s from %s where `oin` = ? limit 1", comerAccountRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, oin)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultComerAccountModel) Insert(ctx context.Context, data *ComerAccount) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, comerAccountRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ComerId, data.Oin, data.IsPrimary, data.Nick, data.Avatar, data.Type, data.IsLinked, data.IsDeleted)
	return ret, err
}

func (m *defaultComerAccountModel) Update(ctx context.Context, newData *ComerAccount) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, comerAccountRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ComerId, newData.Oin, newData.IsPrimary, newData.Nick, newData.Avatar, newData.Type, newData.IsLinked, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultComerAccountModel) tableName() string {
	return m.table
}
