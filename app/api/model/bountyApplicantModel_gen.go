// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bountyApplicantFieldNames          = builder.RawFieldNames(&BountyApplicant{})
	bountyApplicantRows                = strings.Join(bountyApplicantFieldNames, ",")
	bountyApplicantRowsExpectAutoSet   = strings.Join(stringx.Remove(bountyApplicantFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bountyApplicantRowsWithPlaceHolder = strings.Join(stringx.Remove(bountyApplicantFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bountyApplicantModel interface {
		Insert(ctx context.Context, data *BountyApplicant) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BountyApplicant, error)
		Update(ctx context.Context, data *BountyApplicant) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBountyApplicantModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BountyApplicant struct {
		Id          int64          `db:"id"`
		BountyId    sql.NullInt64  `db:"bounty_id"`
		ComerId     sql.NullInt64  `db:"comer_id"`
		ApplyAt     sql.NullTime   `db:"apply_at"`
		RevokeAt    sql.NullTime   `db:"revoke_at"`
		ApproveAt   sql.NullTime   `db:"approve_at"`
		QuitAt      sql.NullTime   `db:"quit_at"`
		SubmitAt    sql.NullTime   `db:"submit_at"`
		Status      sql.NullInt64  `db:"status"`
		Description sql.NullString `db:"description"`
		CreatedAt   sql.NullTime   `db:"created_at"`
		UpdatedAt   sql.NullTime   `db:"updated_at"`
		IsDeleted   sql.NullInt64  `db:"is_deleted"`
	}
)

func newBountyApplicantModel(conn sqlx.SqlConn) *defaultBountyApplicantModel {
	return &defaultBountyApplicantModel{
		conn:  conn,
		table: "`bounty_applicant`",
	}
}

func (m *defaultBountyApplicantModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBountyApplicantModel) FindOne(ctx context.Context, id int64) (*BountyApplicant, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bountyApplicantRows, m.table)
	var resp BountyApplicant
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBountyApplicantModel) Insert(ctx context.Context, data *BountyApplicant) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bountyApplicantRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BountyId, data.ComerId, data.ApplyAt, data.RevokeAt, data.ApproveAt, data.QuitAt, data.SubmitAt, data.Status, data.Description, data.IsDeleted)
	return ret, err
}

func (m *defaultBountyApplicantModel) Update(ctx context.Context, data *BountyApplicant) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bountyApplicantRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.BountyId, data.ComerId, data.ApplyAt, data.RevokeAt, data.ApproveAt, data.QuitAt, data.SubmitAt, data.Status, data.Description, data.IsDeleted, data.Id)
	return err
}

func (m *defaultBountyApplicantModel) tableName() string {
	return m.table
}
