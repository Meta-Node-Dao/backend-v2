// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	governanceStrategyFieldNames          = builder.RawFieldNames(&GovernanceStrategy{})
	governanceStrategyRows                = strings.Join(governanceStrategyFieldNames, ",")
	governanceStrategyRowsExpectAutoSet   = strings.Join(stringx.Remove(governanceStrategyFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	governanceStrategyRowsWithPlaceHolder = strings.Join(stringx.Remove(governanceStrategyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	governanceStrategyModel interface {
		Insert(ctx context.Context, data *GovernanceStrategy) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovernanceStrategy, error)
		Update(ctx context.Context, data *GovernanceStrategy) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovernanceStrategyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovernanceStrategy struct {
		Id                   int64           `db:"id"`
		SettingId            sql.NullInt64   `db:"setting_id"`
		DictValue            sql.NullString  `db:"dict_value"`
		StrategyName         sql.NullString  `db:"strategy_name"`
		ChainId              sql.NullInt64   `db:"chain_id"`
		TokenContractAddress sql.NullString  `db:"token_contract_address"`
		VoteSymbol           sql.NullString  `db:"vote_symbol"`
		VoteDecimals         sql.NullInt64   `db:"vote_decimals"`
		TokenMinBalance      sql.NullFloat64 `db:"token_min_balance"`
		CreatedAt            sql.NullTime    `db:"created_at"`
		UpdatedAt            sql.NullTime    `db:"updated_at"`
		IsDeleted            sql.NullInt64   `db:"is_deleted"`
	}
)

func newGovernanceStrategyModel(conn sqlx.SqlConn) *defaultGovernanceStrategyModel {
	return &defaultGovernanceStrategyModel{
		conn:  conn,
		table: "`governance_strategy`",
	}
}

func (m *defaultGovernanceStrategyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovernanceStrategyModel) FindOne(ctx context.Context, id int64) (*GovernanceStrategy, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", governanceStrategyRows, m.table)
	var resp GovernanceStrategy
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovernanceStrategyModel) Insert(ctx context.Context, data *GovernanceStrategy) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, governanceStrategyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.SettingId, data.DictValue, data.StrategyName, data.ChainId, data.TokenContractAddress, data.VoteSymbol, data.VoteDecimals, data.TokenMinBalance, data.IsDeleted)
	return ret, err
}

func (m *defaultGovernanceStrategyModel) Update(ctx context.Context, data *GovernanceStrategy) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, governanceStrategyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SettingId, data.DictValue, data.StrategyName, data.ChainId, data.TokenContractAddress, data.VoteSymbol, data.VoteDecimals, data.TokenMinBalance, data.IsDeleted, data.Id)
	return err
}

func (m *defaultGovernanceStrategyModel) tableName() string {
	return m.table
}
