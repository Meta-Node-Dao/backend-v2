// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	governanceSettingFieldNames          = builder.RawFieldNames(&GovernanceSetting{})
	governanceSettingRows                = strings.Join(governanceSettingFieldNames, ",")
	governanceSettingRowsExpectAutoSet   = strings.Join(stringx.Remove(governanceSettingFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	governanceSettingRowsWithPlaceHolder = strings.Join(stringx.Remove(governanceSettingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	governanceSettingModel interface {
		Insert(ctx context.Context, data *GovernanceSetting) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovernanceSetting, error)
		Update(ctx context.Context, data *GovernanceSetting) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovernanceSettingModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovernanceSetting struct {
		Id                int64           `db:"id"`
		StartupId         sql.NullInt64   `db:"startup_id"`
		ComerId           sql.NullInt64   `db:"comer_id"`
		VoteSymbol        sql.NullString  `db:"vote_symbol"`
		AllowMember       sql.NullInt64   `db:"allow_member"` // 0:no  1:yes
		ProposalThreshold sql.NullFloat64 `db:"proposal_threshold"`
		ProposalValidity  sql.NullFloat64 `db:"proposal_validity"`
		CreatedAt         sql.NullTime    `db:"created_at"`
		UpdatedAt         sql.NullTime    `db:"updated_at"`
		IsDeleted         sql.NullInt64   `db:"is_deleted"`
	}
)

func newGovernanceSettingModel(conn sqlx.SqlConn) *defaultGovernanceSettingModel {
	return &defaultGovernanceSettingModel{
		conn:  conn,
		table: "`governance_setting`",
	}
}

func (m *defaultGovernanceSettingModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovernanceSettingModel) FindOne(ctx context.Context, id int64) (*GovernanceSetting, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", governanceSettingRows, m.table)
	var resp GovernanceSetting
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovernanceSettingModel) Insert(ctx context.Context, data *GovernanceSetting) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, governanceSettingRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.StartupId, data.ComerId, data.VoteSymbol, data.AllowMember, data.ProposalThreshold, data.ProposalValidity, data.IsDeleted)
	return ret, err
}

func (m *defaultGovernanceSettingModel) Update(ctx context.Context, data *GovernanceSetting) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, governanceSettingRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.StartupId, data.ComerId, data.VoteSymbol, data.AllowMember, data.ProposalThreshold, data.ProposalValidity, data.IsDeleted, data.Id)
	return err
}

func (m *defaultGovernanceSettingModel) tableName() string {
	return m.table
}
