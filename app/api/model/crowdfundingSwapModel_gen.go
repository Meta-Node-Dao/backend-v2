// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	crowdfundingSwapFieldNames          = builder.RawFieldNames(&CrowdfundingSwap{})
	crowdfundingSwapRows                = strings.Join(crowdfundingSwapFieldNames, ",")
	crowdfundingSwapRowsExpectAutoSet   = strings.Join(stringx.Remove(crowdfundingSwapFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	crowdfundingSwapRowsWithPlaceHolder = strings.Join(stringx.Remove(crowdfundingSwapFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	crowdfundingSwapModel interface {
		Insert(ctx context.Context, data *CrowdfundingSwap) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CrowdfundingSwap, error)
		FindOneByChainIdTxHash(ctx context.Context, chainId int64, txHash string) (*CrowdfundingSwap, error)
		Update(ctx context.Context, data *CrowdfundingSwap) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCrowdfundingSwapModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CrowdfundingSwap struct {
		Id              int64        `db:"id"`
		ChainId         int64        `db:"chain_id"` // Chain id
		TxHash          string       `db:"tx_hash"`  // Tx hash
		Timestamp       sql.NullTime `db:"timestamp"`
		Status          int64        `db:"status"`            // 0:Pending 1:Success 2:Failure
		CrowdfundingId  int64        `db:"crowdfunding_id"`   // Crowdfunding id
		ComerId         int64        `db:"comer_id"`          // Comer id
		Access          int64        `db:"access"`            // 1:Invest 2:Withdraw
		BuyTokenSymbol  string       `db:"buy_token_symbol"`  // Buy token symbol
		BuyTokenAmount  float64      `db:"buy_token_amount"`  // Buy token amount
		SellTokenSymbol string       `db:"sell_token_symbol"` // Selling token symbol
		SellTokenAmount float64      `db:"sell_token_amount"` // Selling token amount
		Price           float64      `db:"price"`             // Swap price
		CreatedAt       time.Time    `db:"created_at"`
		UpdatedAt       time.Time    `db:"updated_at"`
	}
)

func newCrowdfundingSwapModel(conn sqlx.SqlConn) *defaultCrowdfundingSwapModel {
	return &defaultCrowdfundingSwapModel{
		conn:  conn,
		table: "`crowdfunding_swap`",
	}
}

func (m *defaultCrowdfundingSwapModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCrowdfundingSwapModel) FindOne(ctx context.Context, id int64) (*CrowdfundingSwap, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", crowdfundingSwapRows, m.table)
	var resp CrowdfundingSwap
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCrowdfundingSwapModel) FindOneByChainIdTxHash(ctx context.Context, chainId int64, txHash string) (*CrowdfundingSwap, error) {
	var resp CrowdfundingSwap
	query := fmt.Sprintf("select %s from %s where `chain_id` = ? and `tx_hash` = ? limit 1", crowdfundingSwapRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, chainId, txHash)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCrowdfundingSwapModel) Insert(ctx context.Context, data *CrowdfundingSwap) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, crowdfundingSwapRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ChainId, data.TxHash, data.Timestamp, data.Status, data.CrowdfundingId, data.ComerId, data.Access, data.BuyTokenSymbol, data.BuyTokenAmount, data.SellTokenSymbol, data.SellTokenAmount, data.Price)
	return ret, err
}

func (m *defaultCrowdfundingSwapModel) Update(ctx context.Context, newData *CrowdfundingSwap) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, crowdfundingSwapRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ChainId, newData.TxHash, newData.Timestamp, newData.Status, newData.CrowdfundingId, newData.ComerId, newData.Access, newData.BuyTokenSymbol, newData.BuyTokenAmount, newData.SellTokenSymbol, newData.SellTokenAmount, newData.Price, newData.Id)
	return err
}

func (m *defaultCrowdfundingSwapModel) tableName() string {
	return m.table
}
