// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	governanceAdminFieldNames          = builder.RawFieldNames(&GovernanceAdmin{})
	governanceAdminRows                = strings.Join(governanceAdminFieldNames, ",")
	governanceAdminRowsExpectAutoSet   = strings.Join(stringx.Remove(governanceAdminFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	governanceAdminRowsWithPlaceHolder = strings.Join(stringx.Remove(governanceAdminFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	governanceAdminModel interface {
		Insert(ctx context.Context, data *GovernanceAdmin) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovernanceAdmin, error)
		Update(ctx context.Context, data *GovernanceAdmin) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovernanceAdminModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovernanceAdmin struct {
		Id            int64          `db:"id"`
		SettingId     sql.NullInt64  `db:"setting_id"`
		WalletAddress sql.NullString `db:"wallet_address"`
		CreatedAt     sql.NullTime   `db:"created_at"`
		UpdatedAt     sql.NullTime   `db:"updated_at"`
		IsDeleted     sql.NullInt64  `db:"is_deleted"`
	}
)

func newGovernanceAdminModel(conn sqlx.SqlConn) *defaultGovernanceAdminModel {
	return &defaultGovernanceAdminModel{
		conn:  conn,
		table: "`governance_admin`",
	}
}

func (m *defaultGovernanceAdminModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovernanceAdminModel) FindOne(ctx context.Context, id int64) (*GovernanceAdmin, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", governanceAdminRows, m.table)
	var resp GovernanceAdmin
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovernanceAdminModel) Insert(ctx context.Context, data *GovernanceAdmin) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, governanceAdminRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.SettingId, data.WalletAddress, data.IsDeleted)
	return ret, err
}

func (m *defaultGovernanceAdminModel) Update(ctx context.Context, data *GovernanceAdmin) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, governanceAdminRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SettingId, data.WalletAddress, data.IsDeleted, data.Id)
	return err
}

func (m *defaultGovernanceAdminModel) tableName() string {
	return m.table
}
