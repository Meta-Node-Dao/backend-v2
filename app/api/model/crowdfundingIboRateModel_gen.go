// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	crowdfundingIboRateFieldNames          = builder.RawFieldNames(&CrowdfundingIboRate{})
	crowdfundingIboRateRows                = strings.Join(crowdfundingIboRateFieldNames, ",")
	crowdfundingIboRateRowsExpectAutoSet   = strings.Join(stringx.Remove(crowdfundingIboRateFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	crowdfundingIboRateRowsWithPlaceHolder = strings.Join(stringx.Remove(crowdfundingIboRateFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	crowdfundingIboRateModel interface {
		Insert(ctx context.Context, data *CrowdfundingIboRate) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CrowdfundingIboRate, error)
		Update(ctx context.Context, data *CrowdfundingIboRate) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCrowdfundingIboRateModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CrowdfundingIboRate struct {
		Id             int64     `db:"id"`
		CrowdfundingId int64     `db:"crowdfunding_id"`  // Crowdfunding id
		EndTime        time.Time `db:"end_time"`         // End time
		MaxBuyAmount   float64   `db:"max_buy_amount"`   // Maximum buy amount
		MaxSellPercent float64   `db:"max_sell_percent"` // Maximum sell percent
		BuyPrice       float64   `db:"buy_price"`        // IBO rate
		SwapPercent    float64   `db:"swap_percent"`     // Swap percent
		CreatedAt      time.Time `db:"created_at"`
		UpdatedAt      time.Time `db:"updated_at"`
	}
)

func newCrowdfundingIboRateModel(conn sqlx.SqlConn) *defaultCrowdfundingIboRateModel {
	return &defaultCrowdfundingIboRateModel{
		conn:  conn,
		table: "`crowdfunding_ibo_rate`",
	}
}

func (m *defaultCrowdfundingIboRateModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCrowdfundingIboRateModel) FindOne(ctx context.Context, id int64) (*CrowdfundingIboRate, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", crowdfundingIboRateRows, m.table)
	var resp CrowdfundingIboRate
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCrowdfundingIboRateModel) Insert(ctx context.Context, data *CrowdfundingIboRate) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, crowdfundingIboRateRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.CrowdfundingId, data.EndTime, data.MaxBuyAmount, data.MaxSellPercent, data.BuyPrice, data.SwapPercent)
	return ret, err
}

func (m *defaultCrowdfundingIboRateModel) Update(ctx context.Context, data *CrowdfundingIboRate) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, crowdfundingIboRateRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CrowdfundingId, data.EndTime, data.MaxBuyAmount, data.MaxSellPercent, data.BuyPrice, data.SwapPercent, data.Id)
	return err
}

func (m *defaultCrowdfundingIboRateModel) tableName() string {
	return m.table
}
