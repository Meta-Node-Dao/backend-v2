// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chainFieldNames          = builder.RawFieldNames(&Chain{})
	chainRows                = strings.Join(chainFieldNames, ",")
	chainRowsExpectAutoSet   = strings.Join(stringx.Remove(chainFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chainRowsWithPlaceHolder = strings.Join(stringx.Remove(chainFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	chainModel interface {
		Insert(ctx context.Context, data *Chain) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Chain, error)
		FindOneByChainId(ctx context.Context, chainId int64) (*Chain, error)
		Update(ctx context.Context, data *Chain) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChainModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Chain struct {
		Id        int64     `db:"id"`
		ChainId   int64     `db:"chain_id"` // Chain ID
		Name      string    `db:"name"`     // Chain name
		Logo      string    `db:"logo"`     // Chain logo
		Status    int64     `db:"status"`   // 1-normal, 2-disable
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
		IsDeleted int64     `db:"is_deleted"` // Is deleted
	}
)

func newChainModel(conn sqlx.SqlConn) *defaultChainModel {
	return &defaultChainModel{
		conn:  conn,
		table: "`chain`",
	}
}

func (m *defaultChainModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChainModel) FindOne(ctx context.Context, id int64) (*Chain, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chainRows, m.table)
	var resp Chain
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChainModel) FindOneByChainId(ctx context.Context, chainId int64) (*Chain, error) {
	var resp Chain
	query := fmt.Sprintf("select %s from %s where `chain_id` = ? limit 1", chainRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, chainId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChainModel) Insert(ctx context.Context, data *Chain) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, chainRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ChainId, data.Name, data.Logo, data.Status, data.IsDeleted)
	return ret, err
}

func (m *defaultChainModel) Update(ctx context.Context, newData *Chain) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chainRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ChainId, newData.Name, newData.Logo, newData.Status, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultChainModel) tableName() string {
	return m.table
}
