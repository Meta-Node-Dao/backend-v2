// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	startupWalletFieldNames          = builder.RawFieldNames(&StartupWallet{})
	startupWalletRows                = strings.Join(startupWalletFieldNames, ",")
	startupWalletRowsExpectAutoSet   = strings.Join(stringx.Remove(startupWalletFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	startupWalletRowsWithPlaceHolder = strings.Join(stringx.Remove(startupWalletFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	startupWalletModel interface {
		Insert(ctx context.Context, data *StartupWallet) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StartupWallet, error)
		Update(ctx context.Context, data *StartupWallet) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStartupWalletModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StartupWallet struct {
		Id            int64     `db:"id"`
		ComerId       int64     `db:"comer_id"`       // comer_id
		StartupId     int64     `db:"startup_id"`     // startup_id
		WalletName    string    `db:"wallet_name"`    // wallet name
		WalletAddress string    `db:"wallet_address"` // wallet address
		CreatedAt     time.Time `db:"created_at"`
		UpdatedAt     time.Time `db:"updated_at"`
		IsDeleted     int64     `db:"is_deleted"` // Is Deleted
	}
)

func newStartupWalletModel(conn sqlx.SqlConn) *defaultStartupWalletModel {
	return &defaultStartupWalletModel{
		conn:  conn,
		table: "`startup_wallet`",
	}
}

func (m *defaultStartupWalletModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStartupWalletModel) FindOne(ctx context.Context, id int64) (*StartupWallet, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", startupWalletRows, m.table)
	var resp StartupWallet
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStartupWalletModel) Insert(ctx context.Context, data *StartupWallet) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, startupWalletRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ComerId, data.StartupId, data.WalletName, data.WalletAddress, data.IsDeleted)
	return ret, err
}

func (m *defaultStartupWalletModel) Update(ctx context.Context, data *StartupWallet) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, startupWalletRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ComerId, data.StartupId, data.WalletName, data.WalletAddress, data.IsDeleted, data.Id)
	return err
}

func (m *defaultStartupWalletModel) tableName() string {
	return m.table
}
