// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pb/meta_land_worker.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetaLandWorker_TriggerUCETask_FullMethodName    = "/pb.MetaLandWorker/TriggerUCETask"
	MetaLandWorker_GetUCESchemas_FullMethodName     = "/pb.MetaLandWorker/GetUCESchemas"
	MetaLandWorker_PreTestRule_FullMethodName       = "/pb.MetaLandWorker/PreTestRule"
	MetaLandWorker_SyncWeworkContact_FullMethodName = "/pb.MetaLandWorker/SyncWeworkContact"
)

// MetaLandWorkerClient is the client API for MetaLandWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaLandWorkerClient interface {
	TriggerUCETask(ctx context.Context, in *TriggerUCETaskRequest, opts ...grpc.CallOption) (*TriggerUCETaskResponse, error)
	GetUCESchemas(ctx context.Context, in *GetUCESchemasRequest, opts ...grpc.CallOption) (*GetUCESchemasResponse, error)
	PreTestRule(ctx context.Context, in *PreTestRuleRequest, opts ...grpc.CallOption) (*PreTestRuleResponse, error)
	SyncWeworkContact(ctx context.Context, in *SyncWeworkContactRequest, opts ...grpc.CallOption) (*SyncWeworkContactResponse, error)
}

type metaLandWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaLandWorkerClient(cc grpc.ClientConnInterface) MetaLandWorkerClient {
	return &metaLandWorkerClient{cc}
}

func (c *metaLandWorkerClient) TriggerUCETask(ctx context.Context, in *TriggerUCETaskRequest, opts ...grpc.CallOption) (*TriggerUCETaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerUCETaskResponse)
	err := c.cc.Invoke(ctx, MetaLandWorker_TriggerUCETask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaLandWorkerClient) GetUCESchemas(ctx context.Context, in *GetUCESchemasRequest, opts ...grpc.CallOption) (*GetUCESchemasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUCESchemasResponse)
	err := c.cc.Invoke(ctx, MetaLandWorker_GetUCESchemas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaLandWorkerClient) PreTestRule(ctx context.Context, in *PreTestRuleRequest, opts ...grpc.CallOption) (*PreTestRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreTestRuleResponse)
	err := c.cc.Invoke(ctx, MetaLandWorker_PreTestRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaLandWorkerClient) SyncWeworkContact(ctx context.Context, in *SyncWeworkContactRequest, opts ...grpc.CallOption) (*SyncWeworkContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncWeworkContactResponse)
	err := c.cc.Invoke(ctx, MetaLandWorker_SyncWeworkContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaLandWorkerServer is the server API for MetaLandWorker service.
// All implementations must embed UnimplementedMetaLandWorkerServer
// for forward compatibility.
type MetaLandWorkerServer interface {
	TriggerUCETask(context.Context, *TriggerUCETaskRequest) (*TriggerUCETaskResponse, error)
	GetUCESchemas(context.Context, *GetUCESchemasRequest) (*GetUCESchemasResponse, error)
	PreTestRule(context.Context, *PreTestRuleRequest) (*PreTestRuleResponse, error)
	SyncWeworkContact(context.Context, *SyncWeworkContactRequest) (*SyncWeworkContactResponse, error)
	mustEmbedUnimplementedMetaLandWorkerServer()
}

// UnimplementedMetaLandWorkerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetaLandWorkerServer struct{}

func (UnimplementedMetaLandWorkerServer) TriggerUCETask(context.Context, *TriggerUCETaskRequest) (*TriggerUCETaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerUCETask not implemented")
}
func (UnimplementedMetaLandWorkerServer) GetUCESchemas(context.Context, *GetUCESchemasRequest) (*GetUCESchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUCESchemas not implemented")
}
func (UnimplementedMetaLandWorkerServer) PreTestRule(context.Context, *PreTestRuleRequest) (*PreTestRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreTestRule not implemented")
}
func (UnimplementedMetaLandWorkerServer) SyncWeworkContact(context.Context, *SyncWeworkContactRequest) (*SyncWeworkContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncWeworkContact not implemented")
}
func (UnimplementedMetaLandWorkerServer) mustEmbedUnimplementedMetaLandWorkerServer() {}
func (UnimplementedMetaLandWorkerServer) testEmbeddedByValue()                        {}

// UnsafeMetaLandWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaLandWorkerServer will
// result in compilation errors.
type UnsafeMetaLandWorkerServer interface {
	mustEmbedUnimplementedMetaLandWorkerServer()
}

func RegisterMetaLandWorkerServer(s grpc.ServiceRegistrar, srv MetaLandWorkerServer) {
	// If the following call pancis, it indicates UnimplementedMetaLandWorkerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetaLandWorker_ServiceDesc, srv)
}

func _MetaLandWorker_TriggerUCETask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerUCETaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaLandWorkerServer).TriggerUCETask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaLandWorker_TriggerUCETask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaLandWorkerServer).TriggerUCETask(ctx, req.(*TriggerUCETaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaLandWorker_GetUCESchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUCESchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaLandWorkerServer).GetUCESchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaLandWorker_GetUCESchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaLandWorkerServer).GetUCESchemas(ctx, req.(*GetUCESchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaLandWorker_PreTestRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreTestRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaLandWorkerServer).PreTestRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaLandWorker_PreTestRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaLandWorkerServer).PreTestRule(ctx, req.(*PreTestRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaLandWorker_SyncWeworkContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncWeworkContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaLandWorkerServer).SyncWeworkContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaLandWorker_SyncWeworkContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaLandWorkerServer).SyncWeworkContact(ctx, req.(*SyncWeworkContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaLandWorker_ServiceDesc is the grpc.ServiceDesc for MetaLandWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaLandWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MetaLandWorker",
	HandlerType: (*MetaLandWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerUCETask",
			Handler:    _MetaLandWorker_TriggerUCETask_Handler,
		},
		{
			MethodName: "GetUCESchemas",
			Handler:    _MetaLandWorker_GetUCESchemas_Handler,
		},
		{
			MethodName: "PreTestRule",
			Handler:    _MetaLandWorker_PreTestRule_Handler,
		},
		{
			MethodName: "SyncWeworkContact",
			Handler:    _MetaLandWorker_SyncWeworkContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/meta_land_worker.proto",
}
