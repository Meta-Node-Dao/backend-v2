// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.6
// Source: meta_land_worker.proto

package metalandworker

import (
	"context"

	"metaLand/app/worker/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetUCESchemasRequest      = pb.GetUCESchemasRequest
	GetUCESchemasResponse     = pb.GetUCESchemasResponse
	PreTestRuleRequest        = pb.PreTestRuleRequest
	PreTestRuleResponse       = pb.PreTestRuleResponse
	SyncWeworkContactRequest  = pb.SyncWeworkContactRequest
	SyncWeworkContactResponse = pb.SyncWeworkContactResponse
	TriggerUCETaskRequest     = pb.TriggerUCETaskRequest
	TriggerUCETaskResponse    = pb.TriggerUCETaskResponse
	UCESchema                 = pb.UCESchema
	UCESchemaField            = pb.UCESchemaField

	MetaLandWorker interface {
		TriggerUCETask(ctx context.Context, in *TriggerUCETaskRequest, opts ...grpc.CallOption) (*TriggerUCETaskResponse, error)
		GetUCESchemas(ctx context.Context, in *GetUCESchemasRequest, opts ...grpc.CallOption) (*GetUCESchemasResponse, error)
		PreTestRule(ctx context.Context, in *PreTestRuleRequest, opts ...grpc.CallOption) (*PreTestRuleResponse, error)
		SyncWeworkContact(ctx context.Context, in *SyncWeworkContactRequest, opts ...grpc.CallOption) (*SyncWeworkContactResponse, error)
	}

	defaultMetaLandWorker struct {
		cli zrpc.Client
	}
)

func NewMetaLandWorker(cli zrpc.Client) MetaLandWorker {
	return &defaultMetaLandWorker{
		cli: cli,
	}
}

func (m *defaultMetaLandWorker) TriggerUCETask(ctx context.Context, in *TriggerUCETaskRequest, opts ...grpc.CallOption) (*TriggerUCETaskResponse, error) {
	client := pb.NewMetaLandWorkerClient(m.cli.Conn())
	return client.TriggerUCETask(ctx, in, opts...)
}

func (m *defaultMetaLandWorker) GetUCESchemas(ctx context.Context, in *GetUCESchemasRequest, opts ...grpc.CallOption) (*GetUCESchemasResponse, error) {
	client := pb.NewMetaLandWorkerClient(m.cli.Conn())
	return client.GetUCESchemas(ctx, in, opts...)
}

func (m *defaultMetaLandWorker) PreTestRule(ctx context.Context, in *PreTestRuleRequest, opts ...grpc.CallOption) (*PreTestRuleResponse, error) {
	client := pb.NewMetaLandWorkerClient(m.cli.Conn())
	return client.PreTestRule(ctx, in, opts...)
}

func (m *defaultMetaLandWorker) SyncWeworkContact(ctx context.Context, in *SyncWeworkContactRequest, opts ...grpc.CallOption) (*SyncWeworkContactResponse, error) {
	client := pb.NewMetaLandWorkerClient(m.cli.Conn())
	return client.SyncWeworkContact(ctx, in, opts...)
}
